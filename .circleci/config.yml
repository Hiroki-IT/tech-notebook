version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.11.0
  aws-ecs: circleci/aws-ecs@1.2.0
  slack: circleci/slack@3.4.2

commands:
  # checkoutに日本語対応化
  setup-git-config:
    steps:
      - run:
          name: Setup git config
          command: |
            git config --global core.quotepath false
            
  # Slackに失敗を通知する
  notify-failure-to-slack:
    parameters:
      message:
        type: string
        default: ${CIRCLE_JOB}
    steps:
      - slack/status:
          fail_only: true
          # メッセージ
          failure_message: "<< parameters.message >>に失敗しました:cry:"

jobs:
  push-builder-image:
    # stepsの実行環境
    machine: true
    steps:
      - setup-git-config
      # ソースコードを，/root/project(=tech-notebook) に配置
      - checkout
      - run:
          name: Build builder
          command: |
            docker build -f ./infra/docker/www/Dockerfile --target production -t ${DOCKER_USER}/${APP_NAME}-builder:${DOCKER_VERSION} .
      - run:
          name: Login to docker hub
          command: |
            echo ${DOCKER_PASS} |
            docker login -u ${DOCKER_USER} --password-stdin
      - run:
          name: Push builder
          command: |
            docker push ${DOCKER_USER}/${APP_NAME}-builder:${DOCKER_VERSION}
        
  make-deploy-source-by-builder:
    docker:
      # stepsの実行環境
      - image: ${DOCKER_USER}/${APP_NAME}-builder:${DOCKER_VERSION}
    steps:
      - setup-git-config
      # ソースコードを，/root/project(=tech-notebook) に配置
      - checkout
      - run:
          # READMEをサイト紹介ページとして利用
          name: Copy README.md
          command: |
            cp README.md ./public/source/about_this_site.md
      - run:
          # デプロイイメージに組み込むため，htmlを生成
          name: Make html
          command: |
            cd ./public
            make html
      - run:
          # ソースコードをワークスペースに保存
          name: Make dir & Copy source to workspace
          command: |
            mkdir -p ./workspace/public/build
            cp -Rp ./public/build/* ./workspace/public/build
      - persist_to_workspace:
          root: ./workspace
          paths:
            # Rootをカレントとした時の相対ディレクトリ
            - ./public/build

workflows:
  version: 2.1
  build-push:
    jobs:
      # Push Image To Docker Hub
      - push-builder-image:
          post-steps:
            - notify-failure-to-slack
          filters:
            branches:
              only:
                # NOTE: productionブランチのみ起動
                - production
      # Make Deploy Source
      - make-deploy-source-by-builder:
          requires:
            - push-builder-image
          post-steps:
            - notify-failure-to-slack
      # Deploy Production Image To ECR www
      # env_var_name型設定項目は，${}をつけずに環境変数を出力
      - aws-ecr/build-and-push-image:
          requires:
            - make-deploy-source-by-builder
          post-steps:
            - notify-failure-to-slack
          name: build-and-push-image-www
          path: ./infra/docker/www/Dockerfile
          dockerfile: Dockerfile
          extra-build-args: --target production
          repo: "${APP_NAME}-www"
          create-repo: true
          tag: ${CIRCLE_SHA1}
          attach-workspace: true
          workspace-root: ./workspace
      # Deploy Service To ECS www
      - aws-ecs/deploy-service-update:
          requires:
            - build-and-push-image-www
          post-steps:
            - notify-failure-to-slack
          name: deploy-service-update-www
          family: "${APP_NAME}-ecs-task-definition"
          cluster-name: "${APP_NAME}-ecs-cluster"
          service-name: "${APP_NAME}-ecs-service"
          deployment-controller: CODE_DEPLOY
          codedeploy-application-name: ${APP_NAME}
          codedeploy-deployment-group-name: "${APP_NAME}-deployment-group"
          codedeploy-load-balanced-container-name: "${APP_NAME}-www"
          codedeploy-load-balanced-container-port: 80
          container-image-name-updates: "container=${APP_NAME}-www,tag=${CIRCLE_SHA1}"